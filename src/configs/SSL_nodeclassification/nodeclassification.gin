import graph_world.models.basic_gnn
import graph_world.self_supervised_learning.pretext_tasks.auxiliary_property_based
import graph_world.self_supervised_learning.pretext_tasks.contrastive_based
import graph_world.self_supervised_learning.pretext_tasks.contrastive_based_different_scale
import graph_world.self_supervised_learning.pretext_tasks.generation_based
import graph_world.self_supervised_learning.pretext_tasks.hybrid
import graph_world.self_supervised_learning.beam_handler
import graph_world.nodeclassification.generator_wrappers

GeneratorBeamHandlerWrapper.handler = @NodeClassificationBeamHandlerSSL()
GeneratorBeamHandlerWrapper.nsamples = 1

NodeClassificationBeamHandlerSSL.num_tuning_rounds = 1
NodeClassificationBeamHandlerSSL.save_tuning_results = False
NodeClassificationBeamHandlerSSL.tuning_metric = "rocauc_ovr"
NodeClassificationBeamHandlerSSL.ktrain = 5
NodeClassificationBeamHandlerSSL.ktuning = 5

NodeClassificationBeamHandlerSSL.benchmarker_wrappers = %BENCHMARKERS

# Import the gin configurations for the mode or experiment you want to run
include '/app/configs/SSL_nodeclassification/mode_1/all.gin'

# Import the appropriate generator setup file (marginalization or no marginalization)
include '/app/configs/SSL_nodeclassification/sbm/default_setup_no_marg.gin'