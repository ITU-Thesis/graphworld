# GCN & GNN hyperparameter ranges
LR = [0.01, 0.001, 0.0001]
HIDDEN_CHANNELS = [4, 8, 16]
NUM_LAYERS = [1, 2, 3, 4]
DROPOUT = [0, 0, 0, 0.3, 0.5, 0.8] # a hack to make dropout equiprobable
EPOCHS = 100
# GNN only
ALPHA = [0.1, 0.2, 0.3]
ITERATIONS = [5, 10, 15]
# Multihead model only
NUM_HEADS = [1, 2, 4]

# SSL only
LAMBDA = [0.001, 0.01, 0.1, 1, 10]
MASK_RATIO = [0.1, 0.2, 0.3]
FEATURE_CORRUPTION_RATIO = [0.1, 0.2, 0.3, 0.4, 0.5]
PARTIAL_FEATURE_RECONSTRUCTION = [True, False]
EMBEDDING_CORRUPTION_RATIO = [0.1, 0.2, 0.3, 0.4, 0.5]
PARTIAL_EMBEDDING_RECONSTRUCTION = [True, False]
DISCRIMINATOR_LR = [0.001, 0.003]
DISCRIMINATOR_EPOCHS = [5, 10]
TAU = [0.1, 0.3, 0.5, 0.7, 0.9]
PPR_ALPHA = [0.15, 0.3, 0.6, 0.85]


# GCN setup with AttributeMask
GCN_AttributeMask_/NNNodeBenchmarkJL.model_class = @GCN
GCN_AttributeMask_/NNNodeBenchmarkJL.pretext_task = @AttributeMask
GCN_AttributeMask_/NNNodeBenchmarkJL.benchmark_params = {
    'epochs' : %EPOCHS,
    'lr': %LR,
    'lambda' : %LAMBDA
}
GCN_AttributeMask_/NNNodeBenchmarkJL.h_params = {
    'in_channels' : 16,
    'hidden_channels' : %HIDDEN_CHANNELS,
    'num_layers' : %NUM_LAYERS,
    'dropout' : %DROPOUT,
    'node_mask_ratio' : %MASK_RATIO
}



# GCN setup with CorruptedFeaturesReconstruction
GCN_CorruptedFeaturesReconstruction_/NNNodeBenchmarkJL.model_class = @GCN
GCN_CorruptedFeaturesReconstruction_/NNNodeBenchmarkJL.pretext_task = @CorruptedFeaturesReconstruction
GCN_CorruptedFeaturesReconstruction_/NNNodeBenchmarkJL.benchmark_params = {
    'epochs' : %EPOCHS,
    'lr': %LR,
    'lambda' : %LAMBDA
}
GCN_CorruptedFeaturesReconstruction_/NNNodeBenchmarkJL.h_params = {
    'in_channels' : 16,
    'hidden_channels' : %HIDDEN_CHANNELS,
    'num_layers' : %NUM_LAYERS,
    'dropout' : %DROPOUT,
    'feature_corruption_ratio' : %FEATURE_CORRUPTION_RATIO,
    'partial_feature_reconstruction' : %PARTIAL_FEATURE_RECONSTRUCTION
}



# GCN setup with CorruptedEmbeddingsReconstruction
GCN_CorruptedEmbeddingsReconstruction_/NNNodeBenchmarkJL.model_class = @GCN
GCN_CorruptedEmbeddingsReconstruction_/NNNodeBenchmarkJL.pretext_task = @CorruptedEmbeddingsReconstruction
GCN_CorruptedEmbeddingsReconstruction_/NNNodeBenchmarkJL.benchmark_params = {
    'epochs' : %EPOCHS,
    'lr': %LR,
    'lambda' : %LAMBDA
}
GCN_CorruptedEmbeddingsReconstruction_/NNNodeBenchmarkJL.h_params = {
    'in_channels' : 16,
    'hidden_channels' : %HIDDEN_CHANNELS,
    'num_layers' : %NUM_LAYERS,
    'dropout' : %DROPOUT,
    'embedding_corruption_ratio' : %EMBEDDING_CORRUPTION_RATIO,
    'partial_embedding_reconstruction' : %PARTIAL_EMBEDDING_RECONSTRUCTION
}



# GCN setup with AutoEncoding
GCN_AutoEncoding_/NNNodeBenchmarkJL.model_class = @GCN
GCN_AutoEncoding_/NNNodeBenchmarkJL.pretext_task = @AutoEncoding
GCN_AutoEncoding_/NNNodeBenchmarkJL.benchmark_params = {
    'epochs' : %EPOCHS,
    'lr': %LR,
    'lambda' : %LAMBDA
}
GCN_AutoEncoding_/NNNodeBenchmarkJL.h_params = {
    'in_channels' : 16,
    'hidden_channels' : %HIDDEN_CHANNELS,
    'num_layers' : %NUM_LAYERS,
    'dropout' : %DROPOUT
}

# GCN setup with NodeClusteringWithAlignment
GCN_NodeClusteringWithAlignment_/NNNodeBenchmarkJL.model_class = @GCN
GCN_NodeClusteringWithAlignment_/NNNodeBenchmarkJL.pretext_task = @NodeClusteringWithAlignment
GCN_NodeClusteringWithAlignment_/NNNodeBenchmarkJL.benchmark_params = {
    'epochs' : %EPOCHS,
    'lr': %LR,
    'lambda' : %LAMBDA
}
GCN_NodeClusteringWithAlignment_/NNNodeBenchmarkJL.h_params = {
    'in_channels' : 16,
    'hidden_channels' : %HIDDEN_CHANNELS,
    'num_layers' : %NUM_LAYERS,
    'dropout' : %DROPOUT,
    'n_clusters': 200
}


# GCN setup with NodeClusteringWithAlignment
GCN_GraphPartition_/NNNodeBenchmarkJL.model_class = @GCN
GCN_GraphPartition_/NNNodeBenchmarkJL.pretext_task = @GraphPartition
GCN_GraphPartition_/NNNodeBenchmarkJL.benchmark_params = {
    'epochs' : %EPOCHS,
    'lr': %LR,
    'lambda' : %LAMBDA
}
GCN_GraphPartition_/NNNodeBenchmarkJL.h_params = {
    'in_channels' : 16,
    'hidden_channels' : %HIDDEN_CHANNELS,
    'num_layers' : %NUM_LAYERS,
    'dropout' : %DROPOUT,
    'n_parts': 20
}


# GCN setup with GAE
GCN_GAE_/NNNodeBenchmarkJL.model_class = @GCN
GCN_GAE_/NNNodeBenchmarkJL.pretext_task = @GAE
GCN_GAE_/NNNodeBenchmarkJL.benchmark_params = {
    'epochs' : %EPOCHS,
    'lr': %LR,
    'lambda' : %LAMBDA
}
GCN_GAE_/NNNodeBenchmarkJL.h_params = {
    'in_channels' : 16,
    'hidden_channels' : %HIDDEN_CHANNELS,
    'num_layers' : %NUM_LAYERS,
    'dropout' : %DROPOUT
}


# GCN setup with VGAE
GCN_VGAE_/NNNodeBenchmarkJL.model_class = @GCN
GCN_VGAE_/NNNodeBenchmarkJL.pretext_task = @VGAE
GCN_VGAE_/NNNodeBenchmarkJL.benchmark_params = {
    'epochs' : %EPOCHS,
    'lr': %LR,
    'lambda' : %LAMBDA
}
GCN_VGAE_/NNNodeBenchmarkJL.h_params = {
    'in_channels' : 16,
    'hidden_channels' : %HIDDEN_CHANNELS,
    'num_layers' : %NUM_LAYERS,
    'dropout' : %DROPOUT
}


# GCN setup with ARGA
GCN_ARGA_/NNNodeBenchmarkJL.model_class = @GCN
GCN_ARGA_/NNNodeBenchmarkJL.pretext_task = @ARGA
GCN_ARGA_/NNNodeBenchmarkJL.benchmark_params = {
    'epochs' : %EPOCHS,
    'lr': %LR,
    'lambda' : %LAMBDA
}
GCN_ARGA_/NNNodeBenchmarkJL.h_params = {
    'in_channels' : 16,
    'hidden_channels' : %HIDDEN_CHANNELS,
    'num_layers' : %NUM_LAYERS,
    'dropout' : %DROPOUT,
    'discriminator_lr' : %DISCRIMINATOR_LR,
    'discriminator_epochs' : %DISCRIMINATOR_EPOCHS
}


# GCN setup with ARGVA
GCN_ARGVA_/NNNodeBenchmarkJL.model_class = @GCN
GCN_ARGVA_/NNNodeBenchmarkJL.pretext_task = @ARGVA
GCN_ARGVA_/NNNodeBenchmarkJL.benchmark_params = {
    'epochs' : %EPOCHS,
    'lr': %LR,
    'lambda' : %LAMBDA
}
GCN_ARGVA_/NNNodeBenchmarkJL.h_params = {
    'in_channels' : 16,
    'hidden_channels' : %HIDDEN_CHANNELS,
    'num_layers' : %NUM_LAYERS,
    'dropout' : %DROPOUT,
    'discriminator_lr' : %DISCRIMINATOR_LR,
    'discriminator_epochs' : %DISCRIMINATOR_EPOCHS
}


# superGAT with attention losses
SuperGAT_SuperGATSSL_/NNNodeBenchmarkJL.model_class = @SuperGAT
SuperGAT_SuperGATSSL_/NNNodeBenchmarkJL.pretext_task = @SuperGATSSL
SuperGAT_SuperGATSSL_/NNNodeBenchmarkJL.benchmark_params = {
    'epochs' : %EPOCHS,
    'lr': %LR,
    'lambda' : %LAMBDA
}
SuperGAT_SuperGATSSL_/NNNodeBenchmarkJL.h_params = {
    'in_channels' : 16,
    'hidden_channels' : %HIDDEN_CHANNELS,
    'num_layers' : %NUM_LAYERS,
    'dropout' : %DROPOUT
}


# GCN with denoising link reconstruction
GCN_DenoisingLinkReconstruction_/NNNodeBenchmarkJL.model_class = @GCN
GCN_DenoisingLinkReconstruction_/NNNodeBenchmarkJL.pretext_task = @DenoisingLinkReconstruction
GCN_DenoisingLinkReconstruction_/NNNodeBenchmarkJL.benchmark_params = {
    'epochs' : %EPOCHS,
    'lr': %LR,
    'lambda' : %LAMBDA
}
GCN_DenoisingLinkReconstruction_/NNNodeBenchmarkJL.h_params = {
    'in_channels' : 16,
    'hidden_channels' : %HIDDEN_CHANNELS,
    'num_layers' : %NUM_LAYERS,
    'dropout' : %DROPOUT,
    'edge_mask_ratio' : %MASK_RATIO
}


# GCN with denoising link reconstruction
GCN_EdgeMask_/NNNodeBenchmarkJL.model_class = @GCN
GCN_EdgeMask_/NNNodeBenchmarkJL.pretext_task = @EdgeMask
GCN_EdgeMask_/NNNodeBenchmarkJL.benchmark_params = {
    'epochs' : %EPOCHS,
    'lr': %LR,
    'lambda' : %LAMBDA
}
GCN_EdgeMask_/NNNodeBenchmarkJL.h_params = {
    'in_channels' : 16,
    'hidden_channels' : %HIDDEN_CHANNELS,
    'num_layers' : %NUM_LAYERS,
    'dropout' : %DROPOUT,
    'edge_mask_ratio' : %MASK_RATIO
}

# GCN with GRACE
GCN_GRACE_/NNNodeBenchmarkJL.model_class = @GCN
GCN_GRACE_/NNNodeBenchmarkJL.pretext_task = @GRACE
GCN_GRACE_/NNNodeBenchmarkJL.benchmark_params = {
    'epochs' : %EPOCHS,
    'lr': %LR,
    'lambda' : %LAMBDA
}
GCN_GRACE_/NNNodeBenchmarkJL.h_params = {
    'in_channels' : 16,
    'hidden_channels' : %HIDDEN_CHANNELS,
    'num_layers' : %NUM_LAYERS,
    'dropout' : %DROPOUT,
    'tau' : %TAU,
    'edge_mask_ratio1' : %MASK_RATIO,
    'edge_mask_ratio2' : %MASK_RATIO,
    'feature_mask_ratio1' : %MASK_RATIO, 
    'feature_mask_ratio2' : %MASK_RATIO
}


# GCN with GCA
GCN_GCA_/NNNodeBenchmarkJL.model_class = @GCN
GCN_GCA_/NNNodeBenchmarkJL.pretext_task = @GCA
GCN_GCA_/NNNodeBenchmarkJL.benchmark_params = {
    'epochs' : %EPOCHS,
    'lr': %LR,
    'lambda' : %LAMBDA
}
GCN_GCA_/NNNodeBenchmarkJL.h_params = {
    'in_channels' : 16,
    'hidden_channels' : %HIDDEN_CHANNELS,
    'num_layers' : %NUM_LAYERS,
    'dropout' : %DROPOUT,
    'tau' : %TAU,
    'edge_mask_ratio1' : %MASK_RATIO,
    'edge_mask_ratio2' : %MASK_RATIO,
    'feature_mask_ratio1' : %MASK_RATIO, 
    'feature_mask_ratio2' : %MASK_RATIO
}


# GCN with BGRL
GCN_BGRL_/NNNodeBenchmarkJL.model_class = @GCN
GCN_BGRL_/NNNodeBenchmarkJL.pretext_task = @BGRL
GCN_BGRL_/NNNodeBenchmarkJL.benchmark_params = {
    'epochs' : %EPOCHS,
    'lr': %LR,
    'lambda' : %LAMBDA
}
GCN_BGRL_/NNNodeBenchmarkJL.h_params = {
    'in_channels' : 16,
    'hidden_channels' : %HIDDEN_CHANNELS,
    'num_layers' : %NUM_LAYERS,
    'dropout' : %DROPOUT,
    'edge_mask_ratio1' : %MASK_RATIO,
    'edge_mask_ratio2' : %MASK_RATIO,
    'feature_mask_ratio1' : %MASK_RATIO, 
    'feature_mask_ratio2' : %MASK_RATIO
}

# GCN with SelfGNNSplit
GCN_SelfGNNSplit_/NNNodeBenchmarkJL.model_class = @GCN
GCN_SelfGNNSplit_/NNNodeBenchmarkJL.pretext_task = @SelfGNNSplit
GCN_SelfGNNSplit_/NNNodeBenchmarkJL.benchmark_params = {
    'epochs' : %EPOCHS,
    'lr': %LR,
    'lambda' : %LAMBDA
}
GCN_SelfGNNSplit_/NNNodeBenchmarkJL.h_params = {
    'in_channels' : 16,
    'hidden_channels' : %HIDDEN_CHANNELS,
    'num_layers' : %NUM_LAYERS,
    'dropout' : %DROPOUT
}


# GCN with SelfGNNPPR
GCN_SelfGNNPPR_/NNNodeBenchmarkJL.model_class = @GCN
GCN_SelfGNNPPR_/NNNodeBenchmarkJL.pretext_task = @SelfGNNPPR
GCN_SelfGNNPPR_/NNNodeBenchmarkJL.benchmark_params = {
    'epochs' : %EPOCHS,
    'lr': %LR,
    'lambda' : %LAMBDA
}
GCN_SelfGNNPPR_/NNNodeBenchmarkJL.h_params = {
    'in_channels' : 16,
    'hidden_channels' : %HIDDEN_CHANNELS,
    'num_layers' : %NUM_LAYERS,
    'dropout' : %DROPOUT,
    'alpha' : %PPR_ALPHA
}


# GCN with SelfGNNLDP
GCN_SelfGNNLDP_/NNNodeBenchmarkJL.model_class = @GCN
GCN_SelfGNNLDP_/NNNodeBenchmarkJL.pretext_task = @SelfGNNLDP
GCN_SelfGNNLDP_/NNNodeBenchmarkJL.benchmark_params = {
    'epochs' : %EPOCHS,
    'lr': %LR,
    'lambda' : %LAMBDA
}
GCN_SelfGNNLDP_/NNNodeBenchmarkJL.h_params = {
    'in_channels' : 16,
    'hidden_channels' : %HIDDEN_CHANNELS,
    'num_layers' : %NUM_LAYERS,
    'dropout' : %DROPOUT
}


# GCN with SelfGNNStandard
GCN_SelfGNNStandard_/NNNodeBenchmarkJL.model_class = @GCN
GCN_SelfGNNStandard_/NNNodeBenchmarkJL.pretext_task = @SelfGNNStandard
GCN_SelfGNNStandard_/NNNodeBenchmarkJL.benchmark_params = {
    'epochs' : %EPOCHS,
    'lr': %LR,
    'lambda' : %LAMBDA
}
GCN_SelfGNNStandard_/NNNodeBenchmarkJL.h_params = {
    'in_channels' : 16,
    'hidden_channels' : %HIDDEN_CHANNELS,
    'num_layers' : %NUM_LAYERS,
    'dropout' : %DROPOUT
}



# GCN setup standard
GCN_/NNNodeBenchmarkJL.model_class = @GCN
GCN_/NNNodeBenchmarkJL.pretext_task = None
GCN_/NNNodeBenchmarkJL.benchmark_params = {
    'epochs' : %EPOCHS,
    'lr': %LR,
    'lambda' : %LAMBDA
}
GCN_/NNNodeBenchmarkJL.h_params = {
    'in_channels' : 16,
    'hidden_channels' : %HIDDEN_CHANNELS,
    'num_layers' : %NUM_LAYERS,
    'dropout' : %DROPOUT,
}



