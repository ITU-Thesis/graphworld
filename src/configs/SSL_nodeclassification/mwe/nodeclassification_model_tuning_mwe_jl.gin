# GCN & GNN hyperparameter ranges
LR = [0.01, 0.001, 0.0001]
HIDDEN_CHANNELS = [4, 8, 16]
NUM_LAYERS = [1, 2, 3, 4]
DROPOUT = [0, 0, 0, 0.3, 0.5, 0.8] # a hack to make dropout equiprobable
EPOCHS = 100
# GNN only
ALPHA = [0.1, 0.2, 0.3]
ITERATIONS = [5, 10, 15]
# Multihead model only
NUM_HEADS = [1, 2, 4]

# SSL only
LAMBDA = [0.001, 0.01, 0.1, 1, 10]
MASK_RATIO = [0.1, 0.2, 0.3]
FEATURE_CORRUPTION_RATIO = [0.1, 0.2, 0.3, 0.4, 0.5]
PARTIAL_FEATURE_RECONSTRUCTION = [True, False]
EMBEDDING_CORRUPTION_RATIO = [0.1, 0.2, 0.3, 0.4, 0.5]
PARTIAL_EMBEDDING_RECONSTRUCTION = [True, False]
DISCRIMINATOR_LR = [0.001, 0.003]
DISCRIMINATOR_EPOCHS = [5, 10]



# GCN setup with AttributeMask
GCN_AttributeMask_/NNNodeBenchmarkJL.model_class = @GCN
GCN_AttributeMask_/NNNodeBenchmarkJL.pretext_tasks = [@AttributeMask]
GCN_AttributeMask_/NNNodeBenchmarkJL.benchmark_params = {
    'epochs' : %EPOCHS,
    'lr': %LR,
    'lambda' : %LAMBDA
}
GCN_AttributeMask_/NNNodeBenchmarkJL.h_params = {
    'in_channels' : 16,
    'hidden_channels' : %HIDDEN_CHANNELS,
    'num_layers' : %NUM_LAYERS,
    'dropout' : %DROPOUT,
    'node_mask_ratio' : %MASK_RATIO
}



# GCN setup with CorruptedFeaturesReconstruction
GCN_CorruptedFeaturesReconstruction_/NNNodeBenchmarkJL.model_class = @GCN
GCN_CorruptedFeaturesReconstruction_/NNNodeBenchmarkJL.pretext_tasks = [@CorruptedFeaturesReconstruction]
GCN_CorruptedFeaturesReconstruction_/NNNodeBenchmarkJL.benchmark_params = {
    'epochs' : %EPOCHS,
    'lr': %LR,
    'lambda' : %LAMBDA
}
GCN_CorruptedFeaturesReconstruction_/NNNodeBenchmarkJL.h_params = {
    'in_channels' : 16,
    'hidden_channels' : %HIDDEN_CHANNELS,
    'num_layers' : %NUM_LAYERS,
    'dropout' : %DROPOUT,
    'feature_corruption_ratio' : %FEATURE_CORRUPTION_RATIO,
    'partial_feature_reconstruction' : %PARTIAL_FEATURE_RECONSTRUCTION
}



# GCN setup with CorruptedEmbeddingsReconstruction
GCN_CorruptedEmbeddingsReconstruction_/NNNodeBenchmarkJL.model_class = @GCN
GCN_CorruptedEmbeddingsReconstruction_/NNNodeBenchmarkJL.pretext_tasks = [@CorruptedEmbeddingsReconstruction]
GCN_CorruptedEmbeddingsReconstruction_/NNNodeBenchmarkJL.benchmark_params = {
    'epochs' : %EPOCHS,
    'lr': %LR,
    'lambda' : %LAMBDA
}
GCN_CorruptedEmbeddingsReconstruction_/NNNodeBenchmarkJL.h_params = {
    'in_channels' : 16,
    'hidden_channels' : %HIDDEN_CHANNELS,
    'num_layers' : %NUM_LAYERS,
    'dropout' : %DROPOUT,
    'embedding_corruption_ratio' : %EMBEDDING_CORRUPTION_RATIO,
    'partial_embedding_reconstruction' : %PARTIAL_EMBEDDING_RECONSTRUCTION
}



# GCN setup with AutoEncoding
GCN_AutoEncoding_/NNNodeBenchmarkJL.model_class = @GCN
GCN_AutoEncoding_/NNNodeBenchmarkJL.pretext_tasks = [@AutoEncoding]
GCN_AutoEncoding_/NNNodeBenchmarkJL.benchmark_params = {
    'epochs' : %EPOCHS,
    'lr': %LR,
    'lambda' : %LAMBDA
}
GCN_AutoEncoding_/NNNodeBenchmarkJL.h_params = {
    'in_channels' : 16,
    'hidden_channels' : %HIDDEN_CHANNELS,
    'num_layers' : %NUM_LAYERS,
    'dropout' : %DROPOUT
}

# GCN setup with NodeClusteringWithAlignment
GCN_NodeClusteringWithAlignment_/NNNodeBenchmarkJL.model_class = @GCN
GCN_NodeClusteringWithAlignment_/NNNodeBenchmarkJL.pretext_tasks = [@NodeClusteringWithAlignment]
GCN_NodeClusteringWithAlignment_/NNNodeBenchmarkJL.benchmark_params = {
    'epochs' : %EPOCHS,
    'lr': %LR,
    'lambda' : %LAMBDA
}
GCN_NodeClusteringWithAlignment_/NNNodeBenchmarkJL.h_params = {
    'in_channels' : 16,
    'hidden_channels' : %HIDDEN_CHANNELS,
    'num_layers' : %NUM_LAYERS,
    'dropout' : %DROPOUT,
    'n_clusters': 200
}


# GCN setup with NodeClusteringWithAlignment
GCN_GraphPartition_/NNNodeBenchmarkJL.model_class = @GCN
GCN_GraphPartition_/NNNodeBenchmarkJL.pretext_tasks = [@GraphPartition]
GCN_GraphPartition_/NNNodeBenchmarkJL.benchmark_params = {
    'epochs' : %EPOCHS,
    'lr': %LR,
    'lambda' : %LAMBDA
}
GCN_GraphPartition_/NNNodeBenchmarkJL.h_params = {
    'in_channels' : 16,
    'hidden_channels' : %HIDDEN_CHANNELS,
    'num_layers' : %NUM_LAYERS,
    'dropout' : %DROPOUT,
    'n_parts': 20
}


# GCN setup with GAE
GCN_GAE_/NNNodeBenchmarkJL.model_class = @GCN
GCN_GAE_/NNNodeBenchmarkJL.pretext_tasks = [@GAE]
GCN_GAE_/NNNodeBenchmarkJL.benchmark_params = {
    'epochs' : %EPOCHS,
    'lr': %LR,
    'lambda' : %LAMBDA
}
GCN_GAE_/NNNodeBenchmarkJL.h_params = {
    'in_channels' : 16,
    'hidden_channels' : %HIDDEN_CHANNELS,
    'num_layers' : %NUM_LAYERS,
    'dropout' : %DROPOUT
}


# GCN setup with VGAE
GCN_VGAE_/NNNodeBenchmarkJL.model_class = @GCN
GCN_VGAE_/NNNodeBenchmarkJL.pretext_tasks = [@VGAE]
GCN_VGAE_/NNNodeBenchmarkJL.benchmark_params = {
    'epochs' : %EPOCHS,
    'lr': %LR,
    'lambda' : %LAMBDA
}
GCN_VGAE_/NNNodeBenchmarkJL.h_params = {
    'in_channels' : 16,
    'hidden_channels' : %HIDDEN_CHANNELS,
    'num_layers' : %NUM_LAYERS,
    'dropout' : %DROPOUT
}


# GCN setup with ARGA
GCN_ARGA_/NNNodeBenchmarkJL.model_class = @GCN
GCN_ARGA_/NNNodeBenchmarkJL.pretext_tasks = [@ARGA]
GCN_ARGA_/NNNodeBenchmarkJL.benchmark_params = {
    'epochs' : %EPOCHS,
    'lr': %LR,
    'lambda' : %LAMBDA
}
GCN_ARGA_/NNNodeBenchmarkJL.h_params = {
    'in_channels' : 16,
    'hidden_channels' : %HIDDEN_CHANNELS,
    'num_layers' : %NUM_LAYERS,
    'dropout' : %DROPOUT,
    'discriminator_lr' : %DISCRIMINATOR_LR,
    'discriminator_epochs' : %DISCRIMINATOR_EPOCHS
}


# GCN setup with ARGVA
GCN_ARGVA_/NNNodeBenchmarkJL.model_class = @GCN
GCN_ARGVA_/NNNodeBenchmarkJL.pretext_tasks = [@ARGVA]
GCN_ARGVA_/NNNodeBenchmarkJL.benchmark_params = {
    'epochs' : %EPOCHS,
    'lr': %LR,
    'lambda' : %LAMBDA
}
GCN_ARGVA_/NNNodeBenchmarkJL.h_params = {
    'in_channels' : 16,
    'hidden_channels' : %HIDDEN_CHANNELS,
    'num_layers' : %NUM_LAYERS,
    'dropout' : %DROPOUT,
    'discriminator_lr' : %DISCRIMINATOR_LR,
    'discriminator_epochs' : %DISCRIMINATOR_EPOCHS
}


# superGAT with attention losses
SuperGAT_SuperGATSSL_/NNNodeBenchmarkJL.model_class = @SuperGAT
SuperGAT_SuperGATSSL_/NNNodeBenchmarkJL.pretext_tasks = [@SuperGATSSL]
SuperGAT_SuperGATSSL_/NNNodeBenchmarkJL.benchmark_params = {
    'epochs' : %EPOCHS,
    'lr': %LR,
    'lambda' : %LAMBDA
}
SuperGAT_SuperGATSSL_/NNNodeBenchmarkJL.h_params = {
    'in_channels' : 16,
    'hidden_channels' : %HIDDEN_CHANNELS,
    'num_layers' : %NUM_LAYERS,
    'dropout' : %DROPOUT
}


# GCN with denoising link reconstruction
GCN_DenoisingLinkReconstruction_/NNNodeBenchmarkJL.model_class = @GCN
GCN_DenoisingLinkReconstruction_/NNNodeBenchmarkJL.pretext_tasks = [@DenoisingLinkReconstruction]
GCN_DenoisingLinkReconstruction_/NNNodeBenchmarkJL.benchmark_params = {
    'epochs' : %EPOCHS,
    'lr': %LR,
    'lambda' : %LAMBDA
}
GCN_DenoisingLinkReconstruction_/NNNodeBenchmarkJL.h_params = {
    'in_channels' : 16,
    'hidden_channels' : %HIDDEN_CHANNELS,
    'num_layers' : %NUM_LAYERS,
    'dropout' : %DROPOUT,
    'edge_mask_ratio' : %MASK_RATIO
}


# GCN with denoising link reconstruction
GCN_EdgeMask_/NNNodeBenchmarkJL.model_class = @GCN
GCN_EdgeMask_/NNNodeBenchmarkJL.pretext_tasks = [@EdgeMask]
GCN_EdgeMask_/NNNodeBenchmarkJL.benchmark_params = {
    'epochs' : %EPOCHS,
    'lr': %LR,
    'lambda' : %LAMBDA
}
GCN_EdgeMask_/NNNodeBenchmarkJL.h_params = {
    'in_channels' : 16,
    'hidden_channels' : %HIDDEN_CHANNELS,
    'num_layers' : %NUM_LAYERS,
    'dropout' : %DROPOUT,
    'edge_mask_ratio' : %MASK_RATIO
}


# GCN setup standard
GCN_/NNNodeBenchmarkJL.model_class = @GCN
GCN_/NNNodeBenchmarkJL.pretext_tasks = []
GCN_/NNNodeBenchmarkJL.benchmark_params = {
    'epochs' : %EPOCHS,
    'lr': %LR,
    'lambda' : %LAMBDA
}
GCN_/NNNodeBenchmarkJL.h_params = {
    'in_channels' : 16,
    'hidden_channels' : %HIDDEN_CHANNELS,
    'num_layers' : %NUM_LAYERS,
    'dropout' : %DROPOUT,
}
