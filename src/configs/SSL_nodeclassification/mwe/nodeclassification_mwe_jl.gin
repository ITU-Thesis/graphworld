import graph_world.models.basic_gnn
import graph_world.self_supervised_learning.pretext_tasks.auxiliary_property_based
import graph_world.self_supervised_learning.pretext_tasks.contrastive_based
import graph_world.self_supervised_learning.pretext_tasks.generation_based
import graph_world.self_supervised_learning.beam_handler

GeneratorBeamHandlerWrapper.handler = @NodeClassificationBeamHandlerSSL()
GeneratorBeamHandlerWrapper.nsamples = 2

NodeClassificationBeamHandlerSSL.num_tuning_rounds = 1
NodeClassificationBeamHandlerSSL.save_tuning_results = False
NodeClassificationBeamHandlerSSL.tuning_metric = "rocauc_ovr"
NodeClassificationBeamHandlerSSL.ktrain = 5
NodeClassificationBeamHandlerSSL.ktuning = 5

NodeClassificationBeamHandlerSSL.benchmarker_wrappers = [
  #@GCN_AttributeMask_/NNNodeBenchmarkSSL,
  #@GCN_CorruptedFeaturesReconstruction_/NNNodeBenchmarkSSL,
  #@GCN_CorruptedEmbeddingsReconstruction_/NNNodeBenchmarkSSL,
  #@GCN_AutoEncoding_/NNNodeBenchmarkSSL,
  #@GCN_GAE_/NNNodeBenchmarkSSL,
  #@GCN_VGAE_/NNNodeBenchmarkSSL,
  #@GCN_ARGA_/NNNodeBenchmarkSSL,
  #@GCN_ARGVA_/NNNodeBenchmarkSSL,
  #@SuperGAT_SuperGATSSL_/NNNodeBenchmarkSSL,
  #@GCN_DenoisingLinkReconstruction_/NNNodeBenchmarkSSL,
  #@GCN_EdgeMask_/NNNodeBenchmarkSSL,
  #@GCN_GRACE_/NNNodeBenchmarkSSL,
  #@GCN_GCA_/NNNodeBenchmarkSSL,
  #@GCN_BGRL_/NNNodeBenchmarkSSL,
  #@GCN_SelfGNNSplit_/NNNodeBenchmarkSSL,
  #@GCN_SelfGNNPPR_/NNNodeBenchmarkSSL,
  #@GCN_SelfGNNLDP_/NNNodeBenchmarkSSL,
  #@GCN_SelfGNNStandard_/NNNodeBenchmarkSSL,
  #@GCN_GBT_/NNNodeBenchmarkSSL,
  @GCN_MERIT_/NNNodeBenchmarkSSL,

  @GCN_/NNNodeBenchmarkSSL,
]



include '/app/configs/SSL_nodeclassification/mwe/nodeclassification_model_tuning_mwe_jl.gin'

# Import the appropriate generator setup file.
include '/app/configs/SSL_nodeclassification/mwe/sbm_mwe_setup.gin'